# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.57)
        AC_INIT([zimwm],[0.1.0])
        AM_INIT_AUTOMAKE(AC_PACKAGE_NAME,AC_PACKAGE_VERSION)
        AC_PROG_MAKE_SET

AC_CONFIG_SRCDIR([.])
AC_CONFIG_SRCDIR([src])

# Checks for programs.
AC_PROG_CC
AC_PROG_CC_STDC
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_CPP
AC_PROG_LIBTOOL

dnl Set PACKAGE_LOCALE_DIR in config.h
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Locale data directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", [Locale data directory])
fi

dnl Set PACKAGE_DATA_DIR in config.h
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared data directory])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared data directory])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", [Shared data directory])
fi

dnl Set PACKAGE_SOURCE_DIR in config.h
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source code directory])

dnl Objective C stuff

AC_MSG_CHECKING(for Objective-C compiler)
cc1objpath=`gcc -print-prog-name=cc1obj`
if test "$cc1objpath" != "cc1obj"; then
  AC_MSG_RESULT(yes)
else
    AC_MSG_ERROR(no)
fi

AC_CHECK_HEADERS(objc/objc.h)
if test $ac_cv_header_objc_objc_h = no; then
  AC_MSG_ERROR(Objective-C headers were not found.)  
fi

_AM_DEPENDENCIES([OBJC])
OBJC="g++"
OBJCFLAGS="-g"
OBJCLDFLAGS="-lobjc -lpthread"
AC_SUBST(OBJC)
AC_SUBST(OBJCFLAGS)
AC_SUBST(OBJCLDFLAGS)

AC_CONFIG_HEADER(zimwm-config.h)
AC_CHECK_HEADERS(stdio.h stdlib.h unistd.h errno.h string.h)
AC_C_CONST
AC_FUNC_SELECT_ARGTYPES

AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([malloc])
AC_CHECK_FUNCS([calloc])
AC_CHECK_FUNCS([realloc])

AC_PATH_PROG(PKGCONFIG,pkg-config,no)
if test x$PKGCONFIG != xno; then
	AC_MSG_CHECKING(for obj-xcb >= 0.0.2...)

	objxcb_major_version=`$PKGCONFIG obj-xcb --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
	objxcb_minor_version=`$PKGCONFIG obj-xcb --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
	objxcb_micro_version=`$PKGCONFIG obj-xcb --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'` #`

	if test $objxcb_major_version -ge 0 -a $objxcb_minor_version \
		       -ge 0 -a $objxcb_micro_version -ge 2 ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING(for obj-xcb compile information)
		OBJXCB_CFLAGS=`$PKGCONFIG obj-xcb --cflags`
		OBJXCB_LIBS=`$PKGCONFIG obj-xcb --libs`
		AC_MSG_RESULT(ok)
	else AC_MSG_ERROR(Incorrect obj-xcb version. Please upgrade to 0.0.2 or greater)
	fi
else
	AC_MSG_ERROR(echo *** obj-xcb >= 0.0.2  not found ***)
fi

AC_SUBST(OBJXCB_CFLAGS)
AC_SUBST(OBJXCB_LIBS)

AC_PATH_PROG(PKGCONFIG,pkg-config,no)
if test x$PKGCONFIG != xno; then
	AC_MSG_CHECKING(for imp >= 0.1.0...)

	imp_major_version=`$PKGCONFIG imp --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
	imp_minor_version=`$PKGCONFIG imp --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
	imp_micro_version=`$PKGCONFIG imp --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'` #`

	if test $imp_major_version -ge 0 -a $imp_minor_version \
		       -ge 1 -a $imp_micro_version -ge 0 ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING(for imp compile information)
		IMP_CFLAGS=`$PKGCONFIG imp --cflags`
		IMP_LIBS=`$PKGCONFIG imp --libs`
		AC_MSG_RESULT(ok)
	else AC_MSG_ERROR(Incorrect imp version. Please upgrade to 0.1.0 or greater)
	fi
else
	AC_MSG_ERROR(echo *** imp >= 0.1.0  not found ***)
fi

AC_SUBST(IMP_CFLAGS)
AC_SUBST(IMP_LIBS)

AC_PATH_PROG(PKGCONFIG,pkg-config,no)
if test x$PKGCONFIG != xno; then
	AC_MSG_CHECKING(for zwl >= 0.1.0...)

	zwl_major_version=`$PKGCONFIG imp --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
	zwl_minor_version=`$PKGCONFIG imp --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
	zwl_micro_version=`$PKGCONFIG imp --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'` #`

	if test $zwl_major_version -ge 0 -a $zwl_minor_version \
		       -ge 1 -a $zwl_micro_version -ge 0 ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING(for zwl compile information)
		ZWL_CFLAGS=`$PKGCONFIG zwl --cflags`
		ZWL_LIBS=`$PKGCONFIG zwl --libs`
		AC_MSG_RESULT(ok)
	else AC_MSG_ERROR(Incorrect zwl version. Please upgrade to 0.1.0 or greater)
	fi
else
	AC_MSG_ERROR(echo *** zwl >= 0.1.0  not found ***)
fi

AC_SUBST(ZWL_CFLAGS)
AC_SUBST(ZWL_LIBS)

dnl Check for cairo
if test x$PKGCONFIG != xno; then
	AC_MSG_CHECKING(for cairo >= 1.2.0...)

	 cairo_major_version=`$PKGCONFIG cairo --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
	 cairo_minor_version=`$PKGCONFIG cairo --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
	 cairo_micro_version=`$PKGCONFIG cairo --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

	 if test $cairo_major_version -ge 1 -a $cairo_minor_version \
		       -ge 2 -a $cairo_micro_version -ge 0 ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING(for cairo compile information)
		CAIRO_CFLAGS=`$PKGCONFIG cairo --cflags`
		CAIRO_LIBS=`$PKGCONFIG cairo --libs`
		AC_MSG_RESULT(ok)
	else AC_MSG_ERROR(Incorrect cairo version. Please upgrade to 1.2.0 or greater)
	fi
else
	AC_MSG_ERROR(echo *** cairo >= 1.2.0  not found ***)
fi

AC_SUBST(CAIRO_CFLAGS)
AC_SUBST(CAIRO_LIBS)

dnl Check for cairo-xcb
if test x$PKGCONFIG != xno; then
	AC_MSG_CHECKING(for cairo-xcb >= 1.2.2...)

	 cairo_major_version=`$PKGCONFIG cairo-xcb --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
	 cairo_minor_version=`$PKGCONFIG cairo-xcb --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
	 cairo_micro_version=`$PKGCONFIG cairo-xcb --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

	 if test $cairo_major_version -ge 1 -a $cairo_minor_version \
		       -ge 2 -a $cairo_micro_version -ge 2 ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING(for cairo-xcb compile information)
		CAIRO_XCB_CFLAGS=`$PKGCONFIG cairo-xcb --cflags`
		CAIRO_XCB_LIBS=`$PKGCONFIG cairo-xcb --libs`
		AC_MSG_RESULT(ok)
	else AC_MSG_ERROR(Incorrect cairo-xcb version. Please upgrade to 1.2.2 or greater)
	fi
else
	AC_MSG_ERROR(echo *** cairo-xcb >= 1.2.2  not found ***)
fi

AC_SUBST(CAIRO_XCB_CFLAGS)
AC_SUBST(CAIRO_XCB_LIBS)

dnl Check for xcb-renderutil
if test x$PKGCONFIG != xno; then
	AC_MSG_CHECKING(for xcb-renderutil >= 0.1...)

	 xcbr_major_version=`$PKGCONFIG xcb-renderutil --modversion | \
	   sed 's/\([[0-9]]*\).\([[0-9]]*\)/\1/'`
	 xcbr_minor_version=`$PKGCONFIG xcb-renderutil --modversion | \ 
	   sed 's/\([[0-9]]*\).\([[0-9]]*\)/\2/'`
dnl	 xcbr_micro_version=`$PKGCONFIG xcb-renderutil --modversion | \
dnl	   sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`

	if test $xcbr_major_version -ge 0 -a $xcbr_minor_version -ge 1 ; then
dnl		       -ge 0 -a $xcbr_micro_version -ge 1 ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING(for xcb-renderutil compile information)
		XCB_RENDERUTIL_CFLAGS=`$PKGCONFIG xcb-renderutil --cflags`
		XCB_RENDERUTIL_LIBS=`$PKGCONFIG xcb-renderutil --libs`
		AC_MSG_RESULT(ok)
	else AC_MSG_ERROR(Incorrect xcb-renderutil version. Please upgrade to 0.1 or greater)
	fi
else
	AC_MSG_ERROR(echo *** xcb-renderutil >= 0.1  not found ***)
fi

AC_SUBST(XCB_RENDERUTIL_CFLAGS)
AC_SUBST(XCB_RENDERUTIL_LIBS)


AC_CHECK_LIB(pot,coffee,,[
                echo "Your coffee pot is empty, time to make some coffee!"
                ])

AC_CONFIG_FILES([
                Makefile \
		data/Makefile \
                src/Makefile \
		])
AC_OUTPUT

echo "zimwm is now ready to be built.  Make sure you reade the README."

